<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoshu.dao.GoodsMapper">
  <resultMap id="BaseResultMap" type="com.xiaoshu.entity.Goods">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="typeid" jdbcType="INTEGER" property="typeid" />
    <result column="code" jdbcType="INTEGER" property="code" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="price" jdbcType="INTEGER" property="price" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="createtime" jdbcType="DATE" property="createtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    id, typeid, code, name, price, status, createtime
  </sql>
 <select id="findGoods" resultType="GoodsVo" parameterType="GoodsVo">
 select g.*,t.typename from goods g,goodstype t
 <where>
 g.typeid=t.id
 <if test="name!=null and name!=''">
 and g.name like '%${name}%'
 </if>
 <if test="typeid!=null and typeid!=0">
 and g.typeid=#{typeid}
 </if>
 <if test="start!=null">
 and g.createtime &gt;= #{start}
 </if>
 <if test="end!=null">
 and g.createtime &lt;= #{end}
 </if>
 </where>
 order by g.code asc
 </select>
 <select id="findBycode" resultType="Goods" parameterType="int">
 select*from goods where code=#{code}
 </select>
 <update id="update" parameterType="Goods">
 update goods set typeid=#{typeid},code=#{code},name=#{name},price=#{price},status=#{status} where id=#{id}
 </update>
 <select id="findTj" resultType="Tj" >
 select t.typename as name,count(*) as num from goods g,goodstype t 
 <where>
 g.typeid=t.id group by t.typename
 </where>
 </select>
</mapper>